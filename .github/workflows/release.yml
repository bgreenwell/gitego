name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_id: ${{ steps.create_release.outputs.id }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v2
      with:
        draft: true
        prerelease: false
        generate_release_notes: true
        files: |
          README.md
          LICENSE

  build-and-upload:
    name: Build and Upload Binaries
    needs: create-release
    strategy:
      matrix:
        include:
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            goos: windows
            goarch: amd64
            asset_name_suffix: "windows-x86_64.zip"
          - target: aarch64-pc-windows-msvc
            os: windows-latest
            goos: windows
            goarch: arm64
            asset_name_suffix: "windows-arm64.zip"
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            goos: linux
            goarch: amd64
            asset_name_suffix: "linux-x86_64.tar.gz"
          - target: aarch64-unknown-linux-musl
            os: ubuntu-latest
            goos: linux
            goarch: arm64
            asset_name_suffix: "linux-arm64.tar.gz"
          - target: x86_64-apple-darwin
            os: macos-latest
            goos: darwin
            goarch: amd64
            asset_name_suffix: "macos-x86_64.tar.gz"
          - target: aarch64-apple-darwin
            os: macos-latest
            goos: darwin
            goarch: arm64
            asset_name_suffix: "macos-arm64.tar.gz"
    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'

    - name: Get version
      id: version
      shell: bash
      run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: Build binary
      shell: bash
      run: |
        binary_name="gitego"
        if [ "${{ matrix.goos }}" = "windows" ]; then
          binary_name="${binary_name}.exe"
        fi
        
        # Build with version and other build flags
        GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build \
          -ldflags "-s -w -X github.com/bgreenwell/gitego/cmd.version=${{ steps.version.outputs.version }}" \
          -o "${binary_name}" .
        
        # Verify the binary was created
        ls -la "${binary_name}"

    - name: Prepare release assets
      shell: bash
      run: |
        # Create a directory for the release
        mkdir -p release
        
        # Copy binary to release directory
        if [ "${{ matrix.goos }}" = "windows" ]; then
          cp gitego.exe release/
        else
          cp gitego release/
        fi
        
        # Copy additional files
        cp README.md release/
        cp LICENSE release/ 2>/dev/null || echo "No LICENSE file found"

    - name: Package binary (Windows)
      if: matrix.goos == 'windows'
      shell: bash
      run: |
        cd release
        asset_name="gitego-${{ steps.version.outputs.version }}-${{ matrix.asset_name_suffix }}"
        7z a "../${asset_name}" *
        cd ..
        echo "ASSET_NAME=${asset_name}" >> $GITHUB_ENV

    - name: Package binary (Unix)
      if: matrix.goos != 'windows'
      shell: bash
      run: |
        cd release
        asset_name="gitego-${{ steps.version.outputs.version }}-${{ matrix.asset_name_suffix }}"
        tar -czf "../${asset_name}" *
        cd ..
        echo "ASSET_NAME=${asset_name}" >> $GITHUB_ENV

    - name: Generate checksums
      shell: bash
      run: |
        if command -v sha256sum >/dev/null; then
          sha256sum "${{ env.ASSET_NAME }}" > "${{ env.ASSET_NAME }}.sha256"
        elif command -v shasum >/dev/null; then
          shasum -a 256 "${{ env.ASSET_NAME }}" > "${{ env.ASSET_NAME }}.sha256"
        else
          echo "No checksum utility found"
        fi

    - name: Upload Release Asset
      uses: softprops/action-gh-release@v2
      with:
        files: |
          ${{ env.ASSET_NAME }}
          ${{ env.ASSET_NAME }}.sha256